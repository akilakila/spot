{"ast":null,"code":"import _slicedToArray from\"/Users/akilasuresh/Hackathon-website-template/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{weekDays}from'../../constants';export var getDatesForMonth=function getDatesForMonth(state){var firstDay=new Date(state.year,state.month-1,1),lastDay=new Date(state.year,state.month,0),lastDayOfPreviousMonth=new Date(state.year,state.month-1,0);var _ref=[firstDay.toLocaleDateString('en-us',{weekday:'long',year:'numeric',month:'long',day:'numeric'}),lastDay.toLocaleDateString('en-us',{weekday:'long',year:'numeric',month:'long',day:'numeric'}),lastDay.getDate(),lastDayOfPreviousMonth.getDate()],firstDayOfTheMonth=_ref[0],lastDayOfTheMonth=_ref[1],totalNumOfDays=_ref[2],totalNumOfDaysInPreviousMonths=_ref[3];var extraDays=weekDays.indexOf(firstDayOfTheMonth.split(',')[0]);return[totalNumOfDays,extraDays,totalNumOfDaysInPreviousMonths];};export var calenderMainLogic=function calenderMainLogic(state,dispatch,data){var structureToHoldDates=[];var _getDatesForMonth=getDatesForMonth(state),_getDatesForMonth2=_slicedToArray(_getDatesForMonth,3),num=_getDatesForMonth2[0],paddingDay=_getDatesForMonth2[1],totalNumOfDaysInPreviousMonths=_getDatesForMonth2[2];for(var i=1;i<=num+paddingDay;i++){if(i>paddingDay){(function(){var currentDay=i-paddingDay;var currentMonth=state.month;var currentYear=state.year;var currentDate=\"\".concat(currentDay,\"-\").concat(currentMonth,\"-\").concat(currentYear);var obj=data.find(function(o){return o.day===currentDate;});if(obj){structureToHoldDates.push({day:i-paddingDay,event:true,dumpDay:false,events:obj.events});}else{structureToHoldDates.push({day:i-paddingDay,event:false,dumpDay:false,events:[]});}})();}else{structureToHoldDates.push({day:totalNumOfDaysInPreviousMonths-paddingDay+i,event:false,dumpDay:true,events:[]});}}dispatch({type:'UPDATE_DATES',data:structureToHoldDates});};","map":{"version":3,"sources":["/Users/akilasuresh/Hackathon-website-template/src/containers/calender/calender.function.ts"],"names":["weekDays","getDatesForMonth","state","firstDay","Date","year","month","lastDay","lastDayOfPreviousMonth","toLocaleDateString","weekday","day","getDate","firstDayOfTheMonth","lastDayOfTheMonth","totalNumOfDays","totalNumOfDaysInPreviousMonths","extraDays","indexOf","split","calenderMainLogic","dispatch","data","structureToHoldDates","num","paddingDay","i","currentDay","currentMonth","currentYear","currentDate","obj","find","o","push","event","dumpDay","events","type"],"mappings":"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","sourcesContent":["import {EventArrayType} from '../../../types/calenderState.types';\nimport {weekDays} from '../../constants';\n\nexport const getDatesForMonth = (state: any) => {\n  const [firstDay, lastDay, lastDayOfPreviousMonth] = [\n    new Date(state.year, state.month - 1, 1),\n    new Date(state.year, state.month, 0),\n    new Date(state.year, state.month - 1, 0)\n  ];\n\n  const [\n    firstDayOfTheMonth,\n    lastDayOfTheMonth,\n    totalNumOfDays,\n    totalNumOfDaysInPreviousMonths\n  ] = [\n    firstDay.toLocaleDateString('en-us', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    }),\n    lastDay.toLocaleDateString('en-us', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    }),\n    lastDay.getDate(),\n    lastDayOfPreviousMonth.getDate()\n  ];\n\n  const extraDays = weekDays.indexOf(firstDayOfTheMonth.split(',')[0]);\n  return [totalNumOfDays, extraDays, totalNumOfDaysInPreviousMonths];\n};\n\nexport const calenderMainLogic = (state: any, dispatch: any, data: any) => {\n  let structureToHoldDates: EventArrayType[] = [];\n\n  const [num, paddingDay, totalNumOfDaysInPreviousMonths] =\n    getDatesForMonth(state);\n\n  for (let i = 1; i <= num + paddingDay; i++) {\n    if (i > paddingDay) {\n      const currentDay = i - paddingDay;\n      const currentMonth = state.month;\n      const currentYear = state.year;\n      const currentDate = `${currentDay}-${currentMonth}-${currentYear}`;\n\n      let obj = data.find((o: any) => o.day === currentDate);\n      if (obj) {\n        structureToHoldDates.push({\n          day: i - paddingDay,\n          event: true,\n          dumpDay: false,\n          events: obj.events\n        });\n      } else {\n        structureToHoldDates.push({\n          day: i - paddingDay,\n          event: false,\n          dumpDay: false,\n          events: []\n        });\n      }\n    } else {\n      structureToHoldDates.push({\n        day: totalNumOfDaysInPreviousMonths - paddingDay + i,\n        event: false,\n        dumpDay: true,\n        events: []\n      });\n    }\n  }\n\n  dispatch({type: 'UPDATE_DATES', data: structureToHoldDates});\n};\n"]},"metadata":{},"sourceType":"module"}