{"ast":null,"code":"import { weekDays } from '../../constants';\nexport const getDatesForMonth = state => {\n  const [firstDay, lastDay, lastDayOfPreviousMonth] = [new Date(state.year, state.month - 1, 1), new Date(state.year, state.month, 0), new Date(state.year, state.month - 1, 0)];\n  const [firstDayOfTheMonth, lastDayOfTheMonth, totalNumOfDays, totalNumOfDaysInPreviousMonths] = [firstDay.toLocaleDateString('en-us', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  }), lastDay.toLocaleDateString('en-us', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  }), lastDay.getDate(), lastDayOfPreviousMonth.getDate()];\n  const extraDays = weekDays.indexOf(firstDayOfTheMonth.split(',')[0]);\n  return [totalNumOfDays, extraDays, totalNumOfDaysInPreviousMonths];\n};\nexport const calenderMainLogic = (state, dispatch, data) => {\n  let structureToHoldDates = [];\n  const [num, paddingDay, totalNumOfDaysInPreviousMonths] = getDatesForMonth(state);\n\n  for (let i = 1; i <= num + paddingDay; i++) {\n    if (i > paddingDay) {\n      const currentDay = i - paddingDay;\n      const currentMonth = state.month;\n      const currentYear = state.year;\n      const currentDate = `${currentDay}-${currentMonth}-${currentYear}`;\n      let obj = data.find(o => o.day === currentDate);\n\n      if (obj) {\n        structureToHoldDates.push({\n          day: i - paddingDay,\n          event: true,\n          dumpDay: false,\n          events: obj.events\n        });\n      } else {\n        structureToHoldDates.push({\n          day: i - paddingDay,\n          event: false,\n          dumpDay: false,\n          events: []\n        });\n      }\n    } else {\n      structureToHoldDates.push({\n        day: totalNumOfDaysInPreviousMonths - paddingDay + i,\n        event: false,\n        dumpDay: true,\n        events: []\n      });\n    }\n  }\n\n  dispatch({\n    type: 'UPDATE_DATES',\n    data: structureToHoldDates\n  });\n};","map":{"version":3,"sources":["/Users/akilasuresh/Hackathon-website-template/src/containers/calender/calender.function.ts"],"names":["weekDays","getDatesForMonth","state","firstDay","lastDay","lastDayOfPreviousMonth","Date","year","month","firstDayOfTheMonth","lastDayOfTheMonth","totalNumOfDays","totalNumOfDaysInPreviousMonths","toLocaleDateString","weekday","day","getDate","extraDays","indexOf","split","calenderMainLogic","dispatch","data","structureToHoldDates","num","paddingDay","i","currentDay","currentMonth","currentYear","currentDate","obj","find","o","push","event","dumpDay","events","type"],"mappings":"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","sourcesContent":["import {EventArrayType} from '../../../types/calenderState.types';\nimport {weekDays} from '../../constants';\n\nexport const getDatesForMonth = (state: any) => {\n  const [firstDay, lastDay, lastDayOfPreviousMonth] = [\n    new Date(state.year, state.month - 1, 1),\n    new Date(state.year, state.month, 0),\n    new Date(state.year, state.month - 1, 0)\n  ];\n\n  const [\n    firstDayOfTheMonth,\n    lastDayOfTheMonth,\n    totalNumOfDays,\n    totalNumOfDaysInPreviousMonths\n  ] = [\n    firstDay.toLocaleDateString('en-us', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    }),\n    lastDay.toLocaleDateString('en-us', {\n      weekday: 'long',\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    }),\n    lastDay.getDate(),\n    lastDayOfPreviousMonth.getDate()\n  ];\n\n  const extraDays = weekDays.indexOf(firstDayOfTheMonth.split(',')[0]);\n  return [totalNumOfDays, extraDays, totalNumOfDaysInPreviousMonths];\n};\n\nexport const calenderMainLogic = (state: any, dispatch: any, data: any) => {\n  let structureToHoldDates: EventArrayType[] = [];\n\n  const [num, paddingDay, totalNumOfDaysInPreviousMonths] =\n    getDatesForMonth(state);\n\n  for (let i = 1; i <= num + paddingDay; i++) {\n    if (i > paddingDay) {\n      const currentDay = i - paddingDay;\n      const currentMonth = state.month;\n      const currentYear = state.year;\n      const currentDate = `${currentDay}-${currentMonth}-${currentYear}`;\n\n      let obj = data.find((o: any) => o.day === currentDate);\n      if (obj) {\n        structureToHoldDates.push({\n          day: i - paddingDay,\n          event: true,\n          dumpDay: false,\n          events: obj.events\n        });\n      } else {\n        structureToHoldDates.push({\n          day: i - paddingDay,\n          event: false,\n          dumpDay: false,\n          events: []\n        });\n      }\n    } else {\n      structureToHoldDates.push({\n        day: totalNumOfDaysInPreviousMonths - paddingDay + i,\n        event: false,\n        dumpDay: true,\n        events: []\n      });\n    }\n  }\n\n  dispatch({type: 'UPDATE_DATES', data: structureToHoldDates});\n};\n"]},"metadata":{},"sourceType":"module"}